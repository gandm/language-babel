name: "Babel ES6 Javascript"
comment: "27Apr15"
scopeName: "source.js.jsx"
foldingStartMarker: "(/\\*|\\{|\\()"
foldingEndMarker: "(\\*/|\\}|\\))"
firstLineMatch: "^#!\\s*/.*\\b(node|js)$\\n?"
fileTypes: [
  "js"
  "es6"
  "babel"
  "jsx"
]
patterns: [
  { include: "#core" }
]
repository:
  core:
    patterns: [
      { include: "#literal-function-labels" }
      { include: "#literal-arrow-function-labels" }
      { include: "#literal-labels" }
      { include: "#literal-keywords" }
      { include: "#literal-for" }
      { include: "#literal-switch" }
      { include: "#expression" }
      { include: "#literal-punctuation" }
    ]
  expression:
    patterns: [
      { include: "#jsx" }
      { include: "#es7-decorators" }
      { include: "#support" }
      { include: "#literal-function" }
      { include: "#literal-arrow-function" }
      {
        include: "#literal-prototype"
        comment: " after literal-function, which includes some prototype strings"
      }
      {
        include: "#literal-regexp"
        comment: "before operators to avoid abiguities"
      }
      { include: "#literal-number" }
      { include: "#literal-quasi" }
      { include: "#literal-string" }
      { include: "#literal-language-constant" }
      { include: "#literal-language-variable" }
      { include: "#literal-method" }
      { include: "#literal-module" }
      { include: "#literal-class" }
      { include: "#literal-constructor" }
      { include: "#literal-method-call" }
      { include: "#literal-function-call" }
      { include: "#comments" }
      { include: "#brackets" }
      { include: "#literal-operators" }
      { include: "#identifier-reference" }
    ]
  "literal-function-labels":
    patterns: [
      {
        comment: " e.g. play: function(arg1, arg2):T {  }"
        name: "meta.function.json.js"
        begin: "\\b([_$a-zA-Z][$\\w]*)\\s*(:)\\s*(?:(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?\\s*(?=\\([^\\)]*\\)\\s*:\\s*[^\\s:]+[\\s\\n]*\\{)"
        end: "(?<={)"
        beginCaptures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "punctuation.separator.key-value.js"
          "3":
            name: "storage.type.js"
          "4":
            name: "storage.type.function.js"
          "5":
            name: "keyword.generator.asterisk.js"
          "6":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type" }
        ]
      }
      {
        comment: " e.g. play: function(arg1, arg2) {  }"
        name: "meta.function.json.js"
        begin: "\\b([_$a-zA-Z][$\\w]*)\\s*(:)\\s*(?:(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?\\s*"
        end: "(?<=\\))"
        beginCaptures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "punctuation.separator.key-value.js"
          "3":
            name: "storage.type.js"
          "4":
            name: "storage.type.function.js"
          "5":
            name: "keyword.generator.asterisk.js"
          "6":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "e.g. 'play': function(arg1, arg2):Foo {  }"
        name: "meta.function.json.js"
        begin: "(?:((')((?:[^']|\\\\')*)('))|((\")((?:[^\"]|\\\\\")*)(\")))\\s*(:)\\s*(?:(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?\\s*(?=\\([^\\)]*\\)\\s*:\\s*[^\\s]+[\\s\\n]*\\{)"
        end: "(?<={)"
        beginCaptures:
          "1":
            name: "string.quoted.single.js"
          "2":
            name: "punctuation.definition.string.begin.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "punctuation.definition.string.end.js"
          "5":
            name: "string.quoted.double.js"
          "6":
            name: "punctuation.definition.string.begin.js"
          "7":
            name: "entity.name.function.js"
          "8":
            name: "punctuation.definition.string.end.js"
          "9":
            name: "punctuation.separator.key-value.js"
          "10":
            name: "storage.type.js"
          "11":
            name: "storage.type.function.js"
          "12":
            name: "keyword.generator.asterisk.js"
          "13":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type" }
        ]
      }
      {
        comment: "e.g. 'play': function(arg1, arg2) {  }"
        name: "meta.function.json.js"
        begin: "(?:((')((?:[^']|\\\\')*)('))|((\")((?:[^\"]|\\\\\")*)(\")))\\s*(:)\\s*(?:(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?\\s*"
        end: "(?<=\\))"
        beginCaptures:
          "1":
            name: "string.quoted.single.js"
          "2":
            name: "punctuation.definition.string.begin.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "punctuation.definition.string.end.js"
          "5":
            name: "string.quoted.double.js"
          "6":
            name: "punctuation.definition.string.begin.js"
          "7":
            name: "entity.name.function.js"
          "8":
            name: "punctuation.definition.string.end.js"
          "9":
            name: "punctuation.separator.key-value.js"
          "10":
            name: "storage.type.js"
          "11":
            name: "storage.type.function.js"
          "12":
            name: "keyword.generator.asterisk.js"
          "13":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
    ]
  "literal-arrow-function-labels":
    patterns: [
      {
        comment: "# e.g. play: (args):T => { }"
        name: "meta.function.json.arrow.js"
        begin: "\\b([_$a-zA-Z][$\\w]*)\\s*(:)\\s*(async)?\\s*(?=\\([^()]*\\)\\s*:\\s*[^\\s:]+\\s*(=>))"
        end: "\\s*(=>)"
        beginCaptures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "punctuation.separator.key-value.js"
          "3":
            name: "storage.type.js"
        endCaptures:
          "1":
            name: "storage.type.function.arrow.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type" }
        ]
      }
      {
        comment: "# e.g. play: (args) => { }"
        name: "meta.function.json.arrow.js"
        begin: "\\b([_$a-zA-Z][$\\w]*)\\s*(:)\\s*(async)?\\s*(?=\\([^()]*\\)\\s*(=>))"
        end: "(?<=\\))\\s*(=>)"
        beginCaptures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "punctuation.separator.key-value.js"
          "3":
            name: "storage.type.js"
        endCaptures:
          "1":
            name: "storage.type.function.arrow.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "# e.g. play: arg:T => { }"
        name: "meta.function.json.arrow.js"
        match: "\\b([_$a-zA-Z][$\\w]*)\\s*(:)\\s*(async)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(:)\\s*([^\\s:]+)\\s*(=>)"
        captures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "punctuation.separator.key-value.js"
          "3":
            name: "storage.type.js"
          "5":
            name: "punctuation.separator.key-value.js.flow"
          "6":
            name: "meta.parameter.type.js.flow"
          "7":
            name: "storage.type.function.arrow.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "# e.g. play: arg => { }"
        name: "meta.function.json.arrow.js"
        match: "\\b([_$a-zA-Z][$\\w]*)\\s*(:)\\s*(async)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(=>)"
        captures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "punctuation.separator.key-value.js"
          "3":
            name: "storage.type.js"
          "5":
            name: "storage.type.function.arrow.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "# e.g. 'play': (args):T => { }"
        name: "meta.function.json.arrow.js"
        begin: "(?:((')((?:[^']|\\\\')*)('))|((\")((?:[^\"]|\\\\\")*)(\")))\\s*(:)\\s*(async)?\\s*(?=\\([^()]*\\)\\s*:\\s*[^\\s:]+\\s*(=>))"
        end: "\\s*(=>)"
        endCaptures:
          "1":
            name: "storage.type.function.arrow.js"
        beginCaptures:
          "1":
            name: "string.quoted.single.js"
          "2":
            name: "punctuation.definition.string.begin.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "punctuation.definition.string.end.js"
          "5":
            name: "string.quoted.double.js"
          "6":
            name: "punctuation.definition.string.begin.js"
          "7":
            name: "entity.name.function.js"
          "8":
            name: "punctuation.definition.string.end.js"
          "9":
            name: "punctuation.separator.key-value.js"
          "10":
            name: "storage.type.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type" }
        ]
      }
      {
        comment: "# e.g. 'play': (args) => { }"
        name: "meta.function.json.arrow.js"
        begin: "(?:((')((?:[^']|\\\\')*)('))|((\")((?:[^\"]|\\\\\")*)(\")))\\s*(:)\\s*(async)?\\s*(?=\\([^()]*\\)\\s*(=>))"
        end: "(?<=\\))\\s*(=>)"
        endCaptures:
          "1":
            name: "storage.type.function.arrow.js"
        beginCaptures:
          "1":
            name: "string.quoted.single.js"
          "2":
            name: "punctuation.definition.string.begin.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "punctuation.definition.string.end.js"
          "5":
            name: "string.quoted.double.js"
          "6":
            name: "punctuation.definition.string.begin.js"
          "7":
            name: "entity.name.function.js"
          "8":
            name: "punctuation.definition.string.end.js"
          "9":
            name: "punctuation.separator.key-value.js"
          "10":
            name: "storage.type.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "# e.g. 'play': arg:T => { }"
        name: "meta.function.json.arrow.js"
        match: "(?:((')((?:[^']|\\\\')*)('))|((\")((?:[^\"]|\\\\\")*)(\")))\\s*(:)\\s*(async)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(:)\\s*([^\\s:]*)\\s*(=>)"
        captures:
          "1":
            name: "string.quoted.single.js"
          "2":
            name: "punctuation.definition.string.begin.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "punctuation.definition.string.end.js"
          "5":
            name: "string.quoted.double.js"
          "6":
            name: "punctuation.definition.string.begin.js"
          "7":
            name: "entity.name.function.js"
          "8":
            name: "punctuation.definition.string.end.js"
          "9":
            name: "punctuation.separator.key-value.js"
          "10":
            name: "storage.type.js"
          "11":
            name: "variable.parameter.function.js"
          "12":
            name: "punctuation.separator.key-value.js.flow"
          "13":
            name: "meta.parameter.type.js.flow"
          "14":
            name: "storage.type.function.arrow.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "# e.g. 'play': arg => { }"
        name: "meta.function.json.arrow.js"
        match: "(?:((')((?:[^']|\\\\')*)('))|((\")((?:[^\"]|\\\\\")*)(\")))\\s*(:)\\s*(async)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(=>)"
        captures:
          "1":
            name: "string.quoted.single.js"
          "2":
            name: "punctuation.definition.string.begin.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "punctuation.definition.string.end.js"
          "5":
            name: "string.quoted.double.js"
          "6":
            name: "punctuation.definition.string.begin.js"
          "7":
            name: "entity.name.function.js"
          "8":
            name: "punctuation.definition.string.end.js"
          "9":
            name: "punctuation.separator.key-value.js"
          "10":
            name: "storage.type.js"
          "11":
            name: "variable.parameter.function.js"
          "12":
            name: "storage.type.function.arrow.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
    ]
  "literal-labels":
    patterns: [
      {
        begin: "(?<!\\?)(?<!\\?\\s)(?=(((')((?:[^']|\\\\')*)('))|((\")((?:[^\"]|\\\\\")*)(\")))\\s*:)"
        end: ":"
        endCaptures:
          "0":
            name: "punctuation.separator.key-value.js"
        patterns: [
          { include: "#literal-string" }
        ]
      }
      {
        name: "constant.other.object.key.js"
        match: "(?<!\\.|\\?|\\?\\s)([_$a-zA-Z][$\\w]*)\\s*(:)"
        captures:
          "1":
            name: "string.unquoted.js"
          "2":
            name: "punctuation.separator.key-value.js"
      }
    ]
  "literal-keywords":
    patterns: [
      { include: "#literal-keyword-storage" }
      {
        name: "keyword.control.flow.js"
        match: "(?<!\\.)\\b(yield)\\b(?:\\s*(\\*))?"
        captures:
          "1":
            name: "keyword.control.flow.js"
          "2":
            name: "keyword.generator.asterisk.js"
      }
      {
        name: "keyword.control.flow.js"
        match: "(?<!\\.)\\b(await|return)\\b"
      }
      {
        name: "keyword.control.conditional.js"
        match: "(?<!\\.)\\b(if|else)\\b"
      }
      {
        name: "keyword.control.trycatch.js"
        match: "(?<!\\.)\\b(catch|finally|throw|try)\\b"
      }
      {
        name: "keyword.control.loop.js"
        match: "(?<!\\.)\\b(break|continue|do|goto|while)\\b"
      }
    ]
  "literal-for":
    patterns: [
      {
        name: "meta.for.js"
        begin: "(?<!\\.)\\b(for)\\b"
        end: "\\)"
        endCaptures:
          "0":
            name: "meta.brace.round.js"
        beginCaptures:
          "1":
            name: "keyword.control.loop.js"
        patterns: [
          {
            begin: "\\("
            end: "(?=\\))"
            beginCaptures:
              "0":
                name: "meta.brace.round.js"
            patterns: [
              { include: "#literal-keyword-storage" }
              { include: "#expression" }
              { include: "#literal-punctuation" }
            ]
          }
        ]
      }
    ]
  "literal-switch":
    patterns: [
      {
        name: "meta.switch.js"
        begin: "(?<!\\.)\\b(switch)\\b"
        end: "\\}"
        beginCaptures:
          "1":
            name: "keyword.control.switch.js"
        endCaptures:
          "0":
            name: "meta.brace.curly.js"
        patterns: [
          { include: "#round-brackets" }
          {
            begin: "\\{"
            end: "(?=})"
            beginCaptures:
              "0":
                name: "meta.brace.curly.js"
            patterns: [
              {
                begin: "(?<!\\.)\\b(case|default)\\b"
                end: "(?=:)"
                beginCaptures:
                  "1":
                    name: "keyword.control.switch.js"
                patterns: [
                  { include: "#expression" }
                ]
              }
              { include: "$self" }
            ]
          }
        ]
      }
    ]
  "protected-keywords":
    patterns: [
      {
        name: "invalid.illegal.variable.name.js"
        match: "(break|case|class|catch|const|continue|debugger|default|delete|delete|do|else|export|extends|finnaly|for|function|if|import|in|instanceof|let|new|return|super|switch|this|throw|try|try|typeof|var|void|while|with|yield|enum|await|implements|package|protected|static|interface|private|public)"
      }
    ]
  brackets:
    patterns: [
      { include: "#round-brackets" }
      { include: "#square-brackets" }
      { include: "#curly-brackets" }
    ]
  "round-brackets":
    patterns: [
      {
        name: "meta.group.braces.round"
        begin: "\\("
        end: "\\)"
        endCaptures:
          "0":
            name: "meta.brace.round.js"
        beginCaptures:
          "0":
            name: "meta.brace.round.js"
        patterns: [
          { include: "#expression" }
        ]
      }
    ]
  "square-brackets":
    patterns: [
      {
        name: "meta.group.braces.square"
        begin: "\\["
        end: "\\]"
        endCaptures:
          "0":
            name: "meta.brace.square.js"
        beginCaptures:
          "0":
            name: "meta.brace.square.js"
        patterns: [
          { include: "#expression" }
        ]
      }
    ]
  "curly-brackets":
    patterns: [
      {
        name: "meta.group.braces.curly"
        begin: "\\{"
        end: "\\}"
        endCaptures:
          "0":
            name: "meta.brace.curly.js"
        beginCaptures:
          "0":
            name: "meta.brace.curly.js"
        patterns: [
          { include: "$self" }
        ]
      }
    ]
  comments:
    patterns: [
      { include: "#special-comments-conditional-compilation" }
      {
        name: "comment.block.documentation.js"
        begin: "/\\*\\*(?!/)"
        end: "\\*/"
        captures:
          "0":
            name: "punctuation.definition.comment.js"
      }
      {
        name: "comment.block.js"
        begin: "/\\*"
        end: "\\*/"
        captures:
          "0":
            name: "punctuation.definition.comment.js"
      }
      {
        name: "comment.block.html.js"
        match: "(<!--|-->)"
        captures:
          "0":
            name: "punctuation.definition.comment.js"
      }
      {
        name: "comment.line.double-slash.js"
        match: "(//).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.js"
      }
      {
        name: "comment.line.shebang.js"
        match: "^(#!).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.js"
      }
    ]
  "special-comments-conditional-compilation":
    patterns: [
      {
        name: "comment.block.conditional.js"
        begin: "/\\*(?=@)"
        end: "\\*/"
        captures:
          "0":
            name: "punctuation.definition.comment.js"
        endCaptures:
          "1":
            name: "keyword.control.conditional.js"
          "2":
            name: "punctuation.definition.keyword.js"
        patterns: [
          {
            name: "punctuation.definition.comment.js"
            match: "/\\*"
          }
          { include: "$self" }
        ]
      }
      {
        name: "keyword.control.conditional.js"
        match: "(@)(if|elif|else|end|ifdef|endif|cc_on|set)\\b"
        captures:
          "1":
            name: "punctuation.definition.keyword.js"
      }
      {
        name: "variable.other.conditional.js"
        match: "(@)(_win32|_win16|_mac|_alpha|_x86|_mc680x0|_PowerPC|_jscript|_jscript_build|_jscript_version|_debug|_fast|[a-zA-Z]\\w+)"
        captures:
          "1":
            name: "punctuation.definition.variable.js"
      }
    ]
  "literal-punctuation":
    patterns: [
      {
        name: "punctuation.terminator.statement.js"
        match: "\\;"
      }
      {
        name: "meta.delimiter.comma.js"
        match: ","
      }
    ]

  "var-declaration":
    patterns: [
      # {
      #   name: "meta.variable.declaration.js"
      #   begin: "([_$a-zA-Z][$\\w]+)\\s*(:)\\s*" # [^,;=\\s\\n]+
      #   beginCaptures:
      #     "1":
      #       name: "variable.other.readwrite.js.LOL"
      #     "2":
      #       name: "punctuation.separator.key-value.js.flow"
      #   end: "(?=[,;\\n])"
      #   patterns: [
      #     { include: "#flow-type" }
      #   ]
      # }
      { include: "#identifier-definition" }
    ]

  "literal-keyword-storage":
    patterns: [
      {
        name: "storage.type.js",
        match: "(?<!\\.)\\b(const|let|var)\\b"
      }
    ]

  # "literal-keyword-storage":
  #   patterns: [
  #     {
  #       name: "meta.variable.declarations.js"
  #       begin: "(?<!\\.)\\b(const|let|var)\\b"
  #       beginCaptures:
  #         "1":
  #           name: "storage.type.js"
  #       end: ";|(?<!,)\\n\\s*(?!,)"
  #       patterns: [
  #         { include: "#var-declaration" }
  #         # {
  #         #   name: "keyword.operator.assignment.js"
  #         #   match: "=(?!=)"
  #         # }
  #         # { include: "#expression" }
  #         # {
  #         #   # name: "meta.delimiter.comma.js",
  #         #   match: "[\\s\\n]*(,)[\\s\\n]*"
  #         #   captures:
  #         #     "1":
  #         #       name: "meta.delimiter.comma.js"
  #         # }
  #       ]
  #     }
  #   ]

  # "literal-keyword-storage":
  #   patterns: [
  #     {
  #       name: "meta.variable.declarations.js"
  #       begin: "(?<!\\.)\\b(const|let|var)\\b"
  #       beginCaptures:
  #         "1":
  #           name: "storage.type.js"
  #       end: ";|(?<!,)\\n\\s*(?!,)"
  #       patterns: [
  #         { include: "#identifier-definition" }
  #         {
  #           name: "meta.parameter.type-info.js.flow"
  #           begin: "\\s*(:)\\s*"
  #           end: "(?=[;=,\\n])"
  #           beginCaptures:
  #             "1":
  #               name: "punctuation.separator.key-value.js.flow"
  #           patterns: [
  #             { include: "#flow-type" }
  #           ]
  #         }
  #         {
  #           name: "keyword.operator.assignment.js"
  #           match: "=(?!=)"
  #         }
  #         { include: "#expression" }
  #         {
  #           # name: "meta.delimiter.comma.js",
  #           match: "[\\s\\n]*(,)[\\s\\n]*"
  #           captures:
  #             "1":
  #               name: "meta.delimiter.comma.js"
  #         }
  #       ]
  #     }
  #   ]

  "literal-function":
    patterns: [
      {
        comment: "e.g. function play(arg1, arg2):Foo {  }"
        name: "meta.function.js"
        begin: "(?:\\b(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?(?=\\s*\\([^\\)]*\\)\\s*:\\s*[^\\s]+[\\s\\n]*\\{)"
        end: "(?<=[{;,\\n\\s])"
        beginCaptures:
          "1":
            name: "storage.type.js"
          "2":
            name: "storage.type.function.js"
          "3":
            name: "keyword.generator.asterisk.js"
          "4":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type" }
        ]
      }
      {
        comment: "e.g. function play(arg1, arg2) {  }"
        name: "meta.function.js"
        begin: "(?:\\b(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?\\s*"
        end: "(?<=\\))"
        beginCaptures:
          "1":
            name: "storage.type.js"
          "2":
            name: "storage.type.function.js"
          "3":
            name: "keyword.generator.asterisk.js"
          "4":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "e.g. play = function(arg1, arg2):Foo {  }"
        name: "meta.function.js"
        begin: "(\\b[_$a-zA-Z][$\\w]*)\\s*=\\s*(?:(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?\\s*(?=\\([^\\)]*\\)\\s*:\\s*[^\\s]+[\\s\\n]*\\{)"
        end: "(?<={)"
        beginCaptures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "storage.type.js"
          "3":
            name: "storage.type.function.js"
          "4":
            name: "keyword.generator.asterisk.js"
          "5":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type" }
        ]
      }
      {
        comment: "e.g. play = function(arg1, arg2) {  }"
        name: "meta.function.js"
        begin: "(\\b[_$a-zA-Z][$\\w]*)\\s*=\\s*(?:(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?\\s*"
        end: "(?<=\\))"
        beginCaptures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "storage.type.js"
          "3":
            name: "storage.type.function.js"
          "4":
            name: "keyword.generator.asterisk.js"
          "5":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "e.g. Sound.prototype.play = function(arg1, arg2):Foo {  }"
        name: "meta.prototype.function.js"
        begin: "(\\b_?[A-Z][$\\w]*)?(\\.)(prototype)(\\.)([_$a-zA-Z][$\\w]*)\\s*=\\s*(?:(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?\\s*(?=\\([^\\)]*\\)\\s*:\\s*[^\\s]+[\\s\\n]*\\{)"
        end: "(?<={)"
        beginCaptures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "variable.language.prototype.js"
          "4":
            name: "keyword.operator.accessor.js"
          "5":
            name: "entity.name.function.js"
          "6":
            name: "storage.type.js"
          "7":
            name: "storage.type.function.js"
          "8":
            name: "keyword.generator.asterisk.js"
          "9":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type" }
        ]
      }
      {
        comment: "e.g. Sound.prototype.play = function(arg1, arg2) {  }"
        name: "meta.prototype.function.js"
        begin: "(\\b_?[A-Z][$\\w]*)?(\\.)(prototype)(\\.)([_$a-zA-Z][$\\w]*)\\s*=\\s*(?:(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?\\s*"
        end: "(?<=\\))"
        beginCaptures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "variable.language.prototype.js"
          "4":
            name: "keyword.operator.accessor.js"
          "5":
            name: "entity.name.function.js"
          "6":
            name: "storage.type.js"
          "7":
            name: "storage.type.function.js"
          "8":
            name: "keyword.generator.asterisk.js"
          "9":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "e.g. Sound.play = function(arg1, arg2):Foo {  }"
        name: "meta.function.static.js"
        begin: "(\\b_?[A-Z][$\\w]*)?(\\.)([_$a-zA-Z][$\\w]*)\\s*=\\s*(?:(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?\\s*(?=\\([^\\)]*\\)\\s*:\\s*[^\\s]+[\\s\\n]*\\{)"
        end: "(?<={)"
        beginCaptures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "storage.type.js"
          "5":
            name: "storage.type.function.js"
          "6":
            name: "keyword.generator.asterisk.js"
          "7":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type" }
        ]
      }
      {
        comment: "e.g. Sound.play = function(arg1, arg2) {  }"
        name: "meta.function.static.js"
        begin: "(\\b_?[A-Z][$\\w]*)?(\\.)([_$a-zA-Z][$\\w]*)\\s*=\\s*(?:(async)\\s+)?\\s*(function)(?:\\s*(\\*)|(?=\\s|[(]))\\s*([_$a-zA-Z][$\\w]*)?\\s*"
        end: "(?<=\\))"
        beginCaptures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "storage.type.js"
          "5":
            name: "storage.type.function.js"
          "6":
            name: "keyword.generator.asterisk.js"
          "7":
            name: "entity.name.function.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
    ]
  "literal-quasi":
    patterns: [
      {
        name: "string.quasi.js"
        begin: "([a-zA-Z$_][\\w$_]*)?(`)"
        end: "`"
        beginCaptures:
          "1":
            name: "entity.quasi.tag.name.js"
          "2":
            name: "punctuation.definition.quasi.begin.js"
        endCaptures:
          "0":
            name: "punctuation.definition.quasi.end.js"
        patterns: [
          {
            name: "entity.quasi.element.js"
            begin: "\\${"
            end: "}"
            beginCaptures:
              "0":
                name: "punctuation.quasi.element.begin.js"
            endCaptures:
              "0":
                name: "punctuation.quasi.element.end.js"
            patterns: [
              { include: "#expression" }
            ]
          }
        ]
      }
    ]
  "literal-operators":
    patterns: [
      {
        name: "keyword.operator.js"
        match: "(?<!\\.)\\b(delete|in|instanceof|new|of|typeof|void|with)\\b"
      }
      {
        name: "keyword.operator.logical.js"
        match: "!(?!=)|&&|\\|\\|"
      }
      {
        name: "keyword.operator.assignment.js"
        match: "=(?!=)"
      }
      {
        name: "keyword.operator.assignment.augmented.js"
        match: "%=|&=|\\*=|\\+=|-=|/=|\\^=|\\|=|<<=|>>=|>>>="
      }
      {
        name: "keyword.operator.bitwise.js"
        match: "~|<<|>>>|>>|&|\\^|\\|"
      }
      {
        name: "keyword.operator.relational.js"
        match: "<=|>=|<|>"
      }
      {
        name: "keyword.operator.comparison.js"
        match: "===|!==|==|!="
      }
      {
        name: "keyword.operator.arithmetic.js"
        match: "--|\\+\\+|/|%|\\*|\\+|-"
      }
      {
        name: "keyword.operator.ternary.js"
        match: "\\?|:"
      }
      {
        name: "keyword.operator.spread.js"
        match: "(?<!\\.)\\.\\.\\."
      }
      {
        name: "keyword.operator.accessor.js"
        match: "\\."
      }
    ]
  "literal-function-call":
    patterns: [
      {
        name: "meta.function-call.without-arguments.js"
        match: "([_$a-zA-Z][$\\w]*)\\s*(\\(\\s*\\))"
        captures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "meta.group.braces.round.function.arguments.js"
      }
      {
        name: "meta.function-call.with-arguments.js"
        match: "([_$a-zA-Z][$\\w]*)\\s*(?=\\()"
        captures:
          "1":
            name: "entity.name.function.js"
      }
    ]
  "literal-language-constant":
    patterns: [
      {
        name: "constant.language.boolean.true.js"
        match: "(?<!\\.)\\btrue\\b"
      }
      {
        name: "constant.language.boolean.false.js"
        match: "(?<!\\.)\\bfalse\\b"
      }
      {
        name: "constant.language.null.js"
        match: "(?<!\\.)\\bnull\\b"
      }
      {
        name: "constant.language.undefined.js"
        match: "(?<!\\.)\\bundefined\\b"
      }
      {
        name: "constant.language.nan.js"
        match: "(?<!\\.)\\bNaN\\b"
      }
    ]
  support:
    patterns: [
      {
        name: "support.class.builtin.js"
        match: "\\b(Array|ArrayBuffer|Boolean|DataView|Date|Float(32|64)Array|Int(8|16|32)Array|Function|GeneratorFunction|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|Uint(8|16|32)Array|Uint8ClampedArray|WeakMap|WeakSet)\\b"
      }
      {
        name: "support.function.js"
        match: "(?<!\\.)\\b(decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape)\\b"
      }
      {
        name: "support.function.mutator.js"
        match: "\\.(shift|sort|splice|unshift|pop|push|reverse)\\b"
      }
      {
        name: "support.class.error.js"
        match: "(?<!\\.)\\b((Eval|Range|Reference|Syntax|Type|URI)?Error)\\b"
      }
      {
        name: "keyword.other.js"
        match: "(?<!\\.)\\b(debugger)\\b"
      }
      {
        name: "support.type.object.dom.js"
        match: "(?<!\\.)\\b(document|window)\\b"
      }
      {
        name: "support.constant.dom.js"
        match: "\\b(ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR)\\b"
      }
      {
        match: "(?<!\\.)\\b(console)(?:(\\.)(warn|info|log|error|time|timeEnd|assert))?\\b"
        captures:
          "1":
            name: "support.type.object.console.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "support.function.console.js"
      }
      {
        name: "support.module.node.js"
        match: "(?<!\\.)\\b(natives|buffer|child_process|cluster|crypto|dgram|dns|fs|http|https|net|os|path|punycode|string|string_decoder|readline|repl|tls|tty|util|vm|zlib)\\b"
      }
      {
        match: "(?<!\\.)\\b(process)(?:(\\.)(stdout|stderr|stdin|argv|execPath|execArgv|env|exitCode|version|versions|config|pid|title|arch|platform|mainModule))?\\b"
        captures:
          "1":
            name: "support.type.object.process.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "support.type.object.process.js"
      }
      {
        match: "(?<!\\.)\\b(process)(?:(\\.)(abort|chdir|cwd|exit|getgid|setgid|getuid|setuid|setgroups|getgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime))?\\b"
        captures:
          "1":
            name: "support.type.object.process.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "support.function.process.js"
      }
      {
        match: "\\b(((?<!\\.)module\\.((?<!\\,)exports|id|require|parent|filename|loaded|children)|exports))\\b"
        captures:
          "1":
            name: "support.type.object.module.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "support.type.object.module.js"
      }
      {
        name: "support.type.object.node.js"
        match: "(?<!\\.)\\b(global|GLOBAL|root|__dirname|__filename)\\b"
      }
      {
        name: "support.class.node.js"
        match: "\\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\\b"
      }
      {
        name: "meta.tag.mustache.js"
        begin: "{{"
        end: "}}"
      }
    ]
  "literal-class":
    patterns: [
      {
        comment: "e.g. class MyClass { }"
        name: "meta.class.js"
        begin: "(?<!\\.)\\b(class)\\s+((?!\\b(extends)\\b)[_$a-zA-Z][$\\w]*)?"
        end: "}"
        beginCaptures:
          "1":
            name: "storage.type.class.js"
          "2":
            name: "entity.name.class.js"
        endCaptures:
          "0":
            name: "punctuation.section.class.end.js"
        patterns: [
          {
            name: "meta.class.extends.js"
            begin: "\\b(extends)\\b"
            end: "(?={)"
            beginCaptures:
              "1":
                name: "storage.type.extends.js"
            patterns: [
              { include: "#expression" }
            ]
          }
          {
            begin: "{"
            end: "(?=})"
            contentName: "meta.class.body.js"
            beginCaptures:
              "0":
                name: "punctuation.section.class.begin.js"
            patterns: [
              { include: "#brackets" }
              { include: "#es7-decorators" }
              { include: "#comments" }
              { include: "#es7-class-properties" }
              { include: "#literal-method" }
            ]
          }
        ]
      }
    ]
  "literal-method-call":
    patterns: [
      {
        name: "meta.function-call.static.without-arguments.js"
        match: "(?:(?<=\\.)|\\b)([A-Z][$\\w]*)\\s*(\\.)([_$a-zA-Z][$\\w]*)\\s*(\\(\\s*\\))"
        captures:
          "1":
            name: "variable.other.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "meta.group.braces.round.function.arguments.js"
      }
      {
        name: "meta.function-call.static.with-arguments.js"
        match: "(?:(?<=\\.)|\\b)([A-Z][$\\w]*)\\s*(\\.)([_$a-zA-Z][$\\w]*)\\s*(?=\\()"
        captures:
          "1":
            name: "variable.other.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "entity.name.function.js"
      }
      {
        name: "meta.function-call.method.without-arguments.js"
        match: "(?<=\\.)([_$a-zA-Z][$\\w]*)\\s*(\\(\\s*\\))"
        captures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "meta.group.braces.round.function.arguments.js"
      }
      {
        name: "meta.function-call.method.with-arguments.js"
        match: "(?<=\\.)([_$a-zA-Z][$\\w]*)\\s*(?=\\()"
        captures:
          "1":
            name: "entity.name.function.js"
      }
    ]
  "literal-language-variable":
    patterns: [
      {
        name: "variable.language.arguments.js"
        match: "(?<!(?<!\\.\\.)\\.)\\b(arguments)\\b"
      }
      {
        name: "variable.language.super.js"
        match: "(?<!(?<!\\.\\.)\\.)\\b(super)\\b"
      }
      {
        name: "variable.language.this.js"
        match: "(?<!(?<!\\.\\.)\\.)\\b(this)\\b"
      }
      {
        name: "variable.language.self.js"
        match: "(?<!(?<!\\.\\.)\\.)\\b(self)\\b"
      }
      {
        name: "variable.language.proto.js"
        match: "(?<=\\.)\\b(__proto__)\\b"
      }
      {
        name: "variable.language.constructor.js"
        match: "(?<=\\.)\\b(constructor)\\b"
      }
      {
        name: "variable.language.prototype.js"
        match: "(?<=\\.)\\b(prototype)\\b"
      }
    ]
  "function-declaration-parameters":
    patterns: [
      {
        begin: "\\("
        end: "\\)"
        beginCaptures:
          "0":
            name: "punctuation.definition.parameters.begin.js"
        endCaptures:
          "0":
            name: "punctuation.definition.parameters.end.js"
        patterns: [
          {
            name: "keyword.operator.spread.js"
            match: "(?<!\\.)\\.\\.\\."
          }
          {
            name: "variable.parameter.function.js"
            match: "[_$a-zA-Z][$\\w]*"
          }
          { include: "#flow-arg-type" }
          {
            name: "punctuation.separator.parameter.function.js"
            match: ","
          }
          {
            name: "meta.parameter.optional.js"
            begin: "="
            end: "(?=[,)])"
            beginCaptures:
              "0":
                name: "keyword.operator.assignment.js"
            patterns: [
              { include: "#expression" }
            ]
          }
          { include: "#comments" }
        ]
      }
    ]
  "string-content":
    patterns: [
      {
        name: "constant.character.escape.newline.js"
        match: "\\\\\\s*\\n"
      }
      {
        name: "constant.character.escape.js"
        match: "\\\\(x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|.)"
      }
    ]
  "literal-number":
    patterns: [
      {
        name: "invalid.illegal.numeric.hex.js"
        match: "(?i)(?:\\B[-+]|\\b)0x[0-9a-f]*\\.(\\B|\\b[0-9]+)"
      }
      {
        name: "invalid.illegal.numeric.octal.js"
        match: "(?:\\B[-+]|\\b)0[0-9]+\\.(\\B|\\b[0-9]+)"
      }
      {
        name: "constant.numeric.js"
        match: "(?:\\B[-+])?(?:\\b0b[0-1]*|\\b0o[0-7]*|\\b0x[0-9a-f]*|(\\B\\.[0-9]+|\\b[0-9]+(\\.[0-9]*)?)(e[-+]?[0-9]+)?)"
      }
      {
        name: "constant.language.infinity.js"
        match: "(?:\\B[-+]|\\b)(Infinity)\\b"
      }
    ]
  "literal-constructor":
    patterns: [
      {
        name: "meta.instance.constructor"
        begin: "(new)\\s+(?=[_$a-zA-Z][$\\w.]*)"
        end: "(?![_$a-zA-Z][$\\w.]*)"
        beginCaptures:
          "1":
            name: "keyword.operator.new.js"
        patterns: [
          { include: "#support" }
          {
            match: "([_$a-zA-Z][$\\w.]*\\.)?([_$a-zA-Z][$\\w]*)"
            captures:
              "2":
                name: "entity.name.type.new.js"
          }
        ]
      }
    ]
  "literal-arrow-function":
    patterns: [
      {
        comment: "e.g. (args):T => { }"
        name: "meta.function.arrow.js"
        begin: "(\\basync)?\\s*(?=\\([^()]*\\)\\s*:\\s*[^\\s:]+\\s*(=>))"
        end: "\\s*(=>)"
        endCaptures:
          "1":
            name: "storage.type.function.arrow.js"
        beginCaptures:
          "1":
            name: "storage.type.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type" }
        ]
      }
      {
        comment: "e.g. (args) => { }"
        name: "meta.function.arrow.js"
        begin: "(\\basync)?\\s*(?=\\([^()]*\\)\\s*(=>))"
        end: "(?<=\\))\\s*(=>)"
        endCaptures:
          "1":
            name: "storage.type.function.arrow.js"
        beginCaptures:
          "1":
            name: "storage.type.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "# e.g. arg:T => { }"
        name: "meta.function.arrow.js"
        match: "(?x)(\\basync)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(:)\\s*([^\\s:]+)\\s*(=>)"
        captures:
          "1":
            name: "storage.type.js"
          "2":
            name: "variable.parameter.function.js"
          "3":
            name: "punctuation.separator.key-value.js.flow"
          "4":
            name: "meta.parameter.type.js.flow"
          "5":
            name: "storage.type.function.arrow.js"
      }
      {
        comment: "# e.g. arg => { }"
        name: "meta.function.arrow.js"
        match: "(?x)(\\basync)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(=>)"
        captures:
          "1":
            name: "storage.type.js"
          "2":
            name: "variable.parameter.function.js"
          "3":
            name: "storage.type.function.arrow.js"
      }
      {
        comment: "# e.g. play = (args):T => { }"
        name: "meta.function.arrow.js"
        begin: "(\\b[_$a-zA-Z][$\\w]*)\\s*=\\s*(async)?\\s*(?=\\([^()]*\\)\\s*:\\s*[^\\s:]+\\s*(=>))"
        end: "\\s*(=>)"
        beginCaptures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "storage.type.js"
        endCaptures:
          "1":
            name: "storage.type.function.arrow.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type" }
        ]
      }
      {
        comment: "# e.g. play = (args) => { }"
        name: "meta.function.arrow.js"
        begin: "(\\b[_$a-zA-Z][$\\w]*)\\s*=\\s*(async)?\\s*(?=\\([^()]*\\)\\s*(=>))"
        end: "(?<=\\))\\s*(=>)"
        beginCaptures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "storage.type.js"
        endCaptures:
          "1":
            name: "storage.type.function.arrow.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "# e.g. play = arg:T => { }"
        name: "meta.function.arrow.js"
        match: "(\\b[_$a-zA-Z][$\\w]*)\\s*=\\s*(async)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(:)\\s*([^\\s:]*)\\s*(=>)"
        captures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "storage.type.js"
          "3":
            name: "variable.parameter.function.js"
          "4":
            name: "punctuation.separator.key-value.js.flow"
          "5":
            name: "meta.parameter.type.js.flow"
          "6":
            name: "storage.type.function.arrow.js"
      }
      {
        comment: "# e.g. play = arg => { }"
        name: "meta.function.arrow.js"
        match: "(\\b[_$a-zA-Z][$\\w]*)\\s*=\\s*(async)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(=>)"
        captures:
          "1":
            name: "entity.name.function.js"
          "2":
            name: "storage.type.js"
          "3":
            name: "variable.parameter.function.js"
          "4":
            name: "storage.type.function.arrow.js"
      }
      {
        comment: "Sound.prototype.play = (args) => { }"
        name: "meta.prototype.function.arrow.js"
        begin: "(\\b_?[A-Z][$\\w]*)?(\\.)(prototype)(\\.)([_$a-zA-Z][$\\w]*)\\s*=\\s*(async)?\\s*(?=\\([^()]*\\)\\s*(=>))"
        end: "(?<=\\))\\s*(=>)"
        beginCaptures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "variable.language.prototype.js"
          "4":
            name: "keyword.operator.accessor.js"
          "5":
            name: "entity.name.function.js"
          "6":
            name: "storage.type.js"
        endCaptures:
          "1":
            name: "storage.type.function.arrow.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "# e.g. Sound.prototype.play = arg => { }"
        name: "meta.prototype.function.arrow.js"
        match: "(?x)(\\b_?[A-Z][$\\w]*)?(\\.)(prototype)(\\.)([_$a-zA-Z][$\\w]*)\\s*=\\s*(async)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(=>)"
        captures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "variable.language.prototype.js"
          "4":
            name: "keyword.operator.accessor.js"
          "5":
            name: "entity.name.function.js"
          "6":
            name: "storage.type.js"
          "7":
            name: "variable.parameter.function.js"
          "8":
            name: "storage.type.function.arrow.js"
      }
      {
        comment: "e.g. Sound.play = (args):T => { }"
        name: "meta.function.static.arrow.js"
        begin: "(\\b_?[A-Z][$\\w]*)?(\\.)([_$a-zA-Z][$\\w]*)\\s*=\\s*(async)?\\s*(?=\\([^()]*\\)\\s*:\\s*[^\\s:]+\\s*(=>))"
        end: "\\s*(=>)"
        beginCaptures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "storage.type.js"
        endCaptures:
          "1":
            name: "storage.type.function.arrow.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type" }
        ]
      }
      {
        comment: "e.g. Sound.play = (args) => { }"
        name: "meta.function.static.arrow.js"
        begin: "(\\b_?[A-Z][$\\w]*)?(\\.)([_$a-zA-Z][$\\w]*)\\s*=\\s*(async)?\\s*(?=\\([^()]*\\)\\s*(=>))"
        end: "(?<=\\))\\s*(=>)"
        beginCaptures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "storage.type.js"
        endCaptures:
          "1":
            name: "storage.type.function.arrow.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "# e.g. Sound.play = arg:T => { }"
        name: "meta.function.static.arrow.js"
        match: "(?x)(\\b_?[A-Z][$\\w]*)?(\\.)([_$a-zA-Z][$\\w]*)\\s*=\\s*(async)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(:)\\s*([^\\s:]*)\\s*(=>)"
        captures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "storage.type.js"
          "5":
            name: "variable.parameter.function.js"
          "6":
            name: "punctuation.separator.key-value.js.flow"
          "7":
            name: "meta.parameter.type.js.flow"
          "8":
            name: "storage.type.function.arrow.js"
      }
      {
        comment: "# e.g. Sound.play = arg => { }"
        name: "meta.function.static.arrow.js"
        match: "(?x)(\\b_?[A-Z][$\\w]*)?(\\.)([_$a-zA-Z][$\\w]*)\\s*=\\s*(async)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(=>)"
        captures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "entity.name.function.js"
          "4":
            name: "storage.type.js"
          "5":
            name: "variable.parameter.function.js"
          "6":
            name: "storage.type.function.arrow.js"
      }
    ]
  "literal-method":
    patterns: [
      {
        comment: " e.g. play(arg1, arg2):T {  }"
        name: "meta.function.method.js"
        begin: "(?:\\b(static)\\s+)?(?:\\b(async)\\s+)?(?:(\\*)\\s*)?([_$a-zA-Z][$\\w]*)\\s*(?=\\([^())]*\\)\\s*:\\s*[^\\s:]+[\\s\\n]*(?:\\s|/\\*.*\\*/)*\\{)"
        end: "(?<={)"
        beginCaptures:
          "1":
            name: "storage.type.js"
          "2":
            name: "storage.type.js"
          "3":
            name: "keyword.generator.asterisk.js"
          "4":
            name: "entity.name.function.method.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type"}
        ]
      }
      {
        comment: " e.g. play(arg1, arg2) {  }"
        name: "meta.function.method.js"
        begin: "(?:\\b(static)\\s+)?(?:\\b(async)\\s+)?(?:(\\*)\\s*)?([_$a-zA-Z][$\\w]*)\\s*(?=\\([^())]*\\)(?:\\s|/\\*.*\\*/)*\\{)"
        end: "(?<=\\))"
        beginCaptures:
          "1":
            name: "storage.type.js"
          "2":
            name: "storage.type.js"
          "3":
            name: "keyword.generator.asterisk.js"
          "4":
            name: "entity.name.function.method.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
      {
        comment: "get play():T | set play(arg):T"
        name: "meta.accessor.js"
        begin: "\\b(?:(static)\\s+)?(get|set)\\s+([_$a-zA-Z][$\\w]*)\\s*(?=\\([^())]*\\)\\s*:\\s*[^\\s:]+[\\s\\n]*(?:\\s|/\\*.*\\*/)*\\{)"
        end: "(?<={)"
        beginCaptures:
          "1":
            name: "storage.type.js"
          "2":
            name: "storage.type.accessor.js"
          "3":
            name: "entity.name.accessor.js"
        patterns: [
          { include: "#function-declaration-parameters" }
          { include: "#flow-return-type"}
        ]
      }
      {
        comment: " getter/setter "
        name: "meta.accessor.js"
        begin: "\\b(?:(static)\\s+)?(get|set)\\s+([_$a-zA-Z][$\\w]*)\\s*(?=\\([^())]*\\)(?:\\s|/\\*.*\\*/)*\\{)"
        end: "(?<=\\))"
        beginCaptures:
          "1":
            name: "storage.type.js"
          "2":
            name: "storage.type.accessor.js"
          "3":
            name: "entity.name.accessor.js"
        patterns: [
          { include: "#function-declaration-parameters" }
        ]
      }
    ]
  "literal-regexp":
    patterns: [
      {
        name: "string.regexp.js"
        begin: "(?<=\\.|\\(|,|{|}|\\[|;|,|<|>|<=|>=|==|!=|===|!==|\\+|-|\\*|%|\\+\\+|--|<<|>>|>>>|&|\\||\\^|!|~|&&|\\|\\||\\?|:|=|\\+=|-=|\\*=|%=|<<=|>>=|>>>=|&=|\\|=|\\^=|/|/=|\\Wnew|\\Wdelete|\\Wvoid|\\Wtypeof|\\Winstanceof|\\Win|\\Wdo|\\Wreturn|\\Wcase|\\Wthrow|^new|^delete|^void|^typeof|^instanceof|^in|^do|^return|^case|^throw|^)\\s*(/)(?!/|\\*|$)"
        end: "(/)([gimy]*)"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.js"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.js"
          "2":
            name: "keyword.other.js"
        patterns: [
          { include: "source.regexp.babel" }
        ]
      }
    ]
  "literal-string":
    patterns: [
      {
        name: "string.quoted.single.js"
        begin: "'"
        end: "(')|(\\n)"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.js"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.js"
          "2":
            name: "invalid.illegal.newline.js"
        patterns: [
          { include: "#string-content" }
        ]
      }
      {
        name: "string.quoted.double.js"
        begin: "\""
        end: "(\")|(\\n)"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.js"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.js"
          "2":
            name: "invalid.illegal.newline.js"
        patterns: [
          { include: "#string-content" }
        ]
      }
    ]
  "literal-module":
    patterns: [
      {
        name: "keyword.control.module.js"
        match: "(?<!\\.)\\b(import|export|default|from|as)\\b"
      }
    ]
  "identifier-constant":
    patterns: [
      {
        # e.g. FOO
        name: "variable.other.constant.js"
        match: "[A-Z][_$\\dA-Z]*\\b"
      }
    ]
  "identifier-dollar":
    patterns: [
      {
        # e.g. $foo
        name: "variable.other.dollar.js"
        match: "(\\$)[$\\w]+"
        captures:
          "1":
            name: "punctuation.dollar.js"
      }
    ]
  "identifier-class-property":
    patterns: [
      {
        # e.g. Foo.property
        name: "meta.property.class.js"
        match: "\\b([A-Z][$\\w]*)\\s*(\\.)([_$a-zA-Z][$\\w]*)"
        captures:
          "1":
            name: "variable.other.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "variable.other.property.static.js"
      }
    ]
  "identifier-property":
    # e.g. foo.property
    patterns: [
      {
        name: "variable.other.object.js"
        match: "(?<!\\.)[_$a-zA-Z][$\\w]*\\s*(?=[\\[\\.])"
        captures:
          "1":
            name: "variable.other.object.js"
      }
      {
        name: "meta.property.object.js"
        match: "(?<=\\.)\\s*[_$a-zA-Z][$\\w]*"
        captures:
          "2":
            name: "variable.other.property.js"
      }
    ]
  "identifier-name":
    # e.g. foo
    patterns: [
      {
        name: "variable.other.readwrite.js"
        match: "[_$a-zA-Z][$\\w]*"
      }
    ]
  "identifier-reference":
    patterns: [
      { include: "#identifier-constant" }
      { include: "#identifier-dollar" }
      { include: "#identifier-class-property" }
      { include: "#identifier-property" }
      { include: "#identifier-name" }
    ]
  "identifier-definition":
    patterns: [
      { include: "#identifier-constant" }
      { include: "#identifier-dollar" }
      { include: "#identifier-name" }
    ]
  "literal-prototype":
    patterns: [
      {
        comment: "e.g. Sound.prototype"
        name: "meta.prototype.access.js"
        match: "([_$a-zA-Z][$\\w]*)(\\.)(prototype)\\b"
        captures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "variable.language.prototype.js"
      }
      {
        comment: "e.g. Sound.prototype = { }"
        name: "meta.prototype.declaration.js"
        match: "([_$a-zA-Z][$\\w]*)(\\.)(prototype)\\s*=\\s*"
        captures:
          "1":
            name: "entity.name.class.js"
          "2":
            name: "keyword.operator.accessor.js"
          "3":
            name: "variable.language.prototype.js"
      }
    ]
  "es7-class-properties":
    patterns: [
      {
        comment: "stage 0 proposal: https://gist.github.com/jeffmo/054df782c05639da2adb"
        match: "\\b(static)?\\s*\\b([_$a-zA-Z][$\\w]*)\\s*(=)"
        captures:
          "1":
            name: "storage.type.js"
          "2":
            name: "variable.other.property.js"
          "3":
            name: "storage.type.js"
      }
    ]
  "es7-decorators":
    patterns: [
      {
        comment: "https://github.com/wycats/javascript-decorators"
        name: "tag.decorator.js"
        match: "(@)([_$a-zA-Z][$\\w]*)\\b"
        captures:
          "1":
            name: "punctuation.definition.tag.js"
          "2":
            name: "entity.name.tag.js"
      }
    ]
  jsx:
    comment: "but excludes using unicode esc characters, <ZWNJ> and <ZWJ> as per the draft. Will anyone use these?"
    patterns: [
      { include: "#jsx-tag-element-name" }
    ]
  "jsx-tag-element-name":
    patterns: [
      {
        comment: "Tags that end > are trapped in #jsx-tag-termination"
        name: "meta.tag.jsx"
        begin: "(<)([$_\\p{L}](?:[$.\\p{L}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Nl}\\p{Pc}-](?<!\\.\\.))*+)(?=[ />\\t\\n])(?<!\\.)"
        end: "(</)(\\2)(>)|(/>)"
        beginCaptures:
          "1":
            name: "punctuation.definition.tag.jsx"
          "2":
            name: "entity.name.tag.open.jsx"
        endCaptures:
          "1":
            name: "punctuation.definition.tag.jsx"
          "2":
            name: "entity.name.tag.close.jsx"
          "3":
            name: "punctuation.definition.tag.jsx"
        patterns: [
          { include: "#jsx-tag-termination" }
          { include: "#jsx-tag-attributes" }
        ]
      }
    ]
  "jsx-tag-termination":
    patterns: [
      {
        comment: "uses non consuming search for </ in </tag>"
        begin: ">"
        end: "(?=</)"
        beginCaptures:
          "0":
            name: "punctuation.definition.tag.jsx"
        patterns: [
          { include: "#jsx-evaluated-code" }
          { include: "#jsx-entities" }
          { include: "#jsx-tag-element-name" }
        ]
      }
    ]
  "jsx-tag-attributes":
    patterns: [
      { include: "#jsx-attribute-name" }
      { include: "#jsx-assignment" }
      { include: "#jsx-string-double-quoted" }
      { include: "#jsx-string-single-quoted" }
      { include: "#jsx-evaluated-code" }
      { include: "#jsx-tag-element-name" }
      { include: "#jsx-tag-attributes" }
      { include: "#comments" }
    ]
  "jsx-spread-attribute":
    patterns: [
      {
        comment: "Spread attribute { ... AssignmentExpression }"
        match: "(?<!\\.)\\.\\.\\."
        name: "keyword.operator.spread.jsx"
      }
    ]
  "jsx-attribute-name":
    patterns: [
      {
        comment: "look for attribute name"
        match: "(?<!\\S)([$_\\p{L}](?:[$.\\p{L}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Nl}\\p{Pc}-](?<!\\.\\.))*+)(?<!\\.)(?=//|/\\*|=|\\s)"
        captures:
          "0":
            name: "entity.other.attribute-name.jsx"
      }
    ]
  "jsx-assignment":
    patterns: [
      {
        comment: "look for attribute assignment"
        name: "keyword.operator.assignment.jsx"
        match: "=(?=\\s*(?:'|\"|{|/\\*|<|//|\\n))"
      }
    ]
  "jsx-string-double-quoted":
    name: "string.quoted.double.js"
    begin: "\""
    end: "\"(?<!\\\\\")"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.jsx"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.jsx"
    patterns: [
      { include: "#jsx-entities" }
    ]
  "jsx-string-single-quoted":
    name: "string.quoted.single.js"
    begin: "'"
    end: "'(?<!\\\\')"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.jsx"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.jsx"
    patterns: [
      { include: "#jsx-entities" }
    ]
  "jsx-evaluated-code":
    name: "meta.embedded.expression.js"
    begin: "{"
    end: "}"
    beginCaptures:
      "0":
        name: "punctuation.section.embedded.begin.jsx"
    endCaptures:
      "0":
        name: "punctuation.section.embedded.end.jsx"
    contentName: "source.js.jsx"
    patterns: [
      { include: "#jsx-string-double-quoted" }
      { include: "#jsx-string-single-quoted" }
      { include: "#jsx-spread-attribute" }
      { include: "#expression" }
    ]
  "jsx-entities":
    patterns: [
      {
        comment: "Embeded HTML entities &blah"
        match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
        captures:
          "0":
            name: "constant.character.entity.jsx"
          "1":
            name: "punctuation.definition.entity.jsx"
          "2":
            name: "entity.name.tag.html.jsx"
          "3":
            name: "punctuation.definition.entity.jsx"
      }
      {
        comment: "Entity with & and invalid name"
        match: "&\\S*;"
        name: "invalid.illegal.bad-ampersand.jsx"
      }
    ]

  "flow-type":
    name: "meta.parameter.type.js.flow"
    match: "[_$a-zA-Z][$\\w]*"

  "flow-arg-type":
    name: "meta.parameter.type-info.js.flow"
    begin: "(:)\\s*"
    end: "(?=[=:/,)])"
    beginCaptures:
      "1":
        name: "punctuation.separator.key-value.js.flow"
    patterns: [
      { include: "#flow-type" }
    ]


  "flow-return-type":
    patterns: [
      {
        name: "meta.parameter.type-info.js.flow"
        match: "\\s*(:)\\s*([^\\s=:/,)]+)(\\s*/\\*.*\\*/)?"
        captures:
          "1":
            name: "punctuation.separator.key-value.js.flow"
          "2":
            name: "meta.parameter.type.js.flow"
          "3":
            name: "comment.block.documentation.js"
      }
    ]

  # "flow-return-type2":
  #   name: "meta.parameter.type-info.js.flow"
  #   begin: "(:)\\s*"
  #   end: "(?=[\\s{])"
  #   beginCaptures:
  #     "1":
  #       name: "punctuation.separator.key-value.js.flow"
  #   patterns: [
  #     { include: "#flow-type" }
  #   ]
